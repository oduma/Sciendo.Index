//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sciendo.Index.Web.IndexingClient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProgressStatus", Namespace="http://schemas.datacontract.org/2004/07/Sciendo.Indexer.Agent.Service")]
    [System.SerializableAttribute()]
    public partial class ProgressStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PackageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Sciendo.Index.Web.IndexingClient.Status StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Package {
            get {
                return this.PackageField;
            }
            set {
                if ((object.ReferenceEquals(this.PackageField, value) != true)) {
                    this.PackageField = value;
                    this.RaisePropertyChanged("Package");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sciendo.Index.Web.IndexingClient.Status Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/Sciendo.Lyrics.Common")]
    public enum Status : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotStarted = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FileNotFound = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FileNotTagged = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ArtistSongRetrievedFromFile = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LyricsUrlUnreachable = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LyricsNotFound = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LyricsDownloadedOk = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotIndexed = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Done = 8,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SourceFolders", Namespace="http://schemas.datacontract.org/2004/07/Sciendo.Indexer.Agent.Service")]
    [System.SerializableAttribute()]
    public partial class SourceFolders : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LyricsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MusicField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lyrics {
            get {
                return this.LyricsField;
            }
            set {
                if ((object.ReferenceEquals(this.LyricsField, value) != true)) {
                    this.LyricsField = value;
                    this.RaisePropertyChanged("Lyrics");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Music {
            get {
                return this.MusicField;
            }
            set {
                if ((object.ReferenceEquals(this.MusicField, value) != true)) {
                    this.MusicField = value;
                    this.RaisePropertyChanged("Music");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Sciendo.Indexer.Agent", ConfigurationName="IndexingClient.IIndexerAgent")]
    public interface IIndexerAgent {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Indexer.Agent/IIndexerAgent/IndexLyricsOnDemand", ReplyAction="http://Sciendo.Indexer.Agent/IIndexerAgent/IndexLyricsOnDemandResponse")]
        int IndexLyricsOnDemand(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Indexer.Agent/IIndexerAgent/IndexLyricsOnDemand", ReplyAction="http://Sciendo.Indexer.Agent/IIndexerAgent/IndexLyricsOnDemandResponse")]
        System.Threading.Tasks.Task<int> IndexLyricsOnDemandAsync(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Indexer.Agent/IIndexerAgent/IndexMusicOnDemand", ReplyAction="http://Sciendo.Indexer.Agent/IIndexerAgent/IndexMusicOnDemandResponse")]
        int IndexMusicOnDemand(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Indexer.Agent/IIndexerAgent/IndexMusicOnDemand", ReplyAction="http://Sciendo.Indexer.Agent/IIndexerAgent/IndexMusicOnDemandResponse")]
        System.Threading.Tasks.Task<int> IndexMusicOnDemandAsync(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Indexer.Agent/IIndexerAgent/GetLastProcessedPackages", ReplyAction="http://Sciendo.Indexer.Agent/IIndexerAgent/GetLastProcessedPackagesResponse")]
        Sciendo.Index.Web.IndexingClient.ProgressStatus[] GetLastProcessedPackages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Indexer.Agent/IIndexerAgent/GetLastProcessedPackages", ReplyAction="http://Sciendo.Indexer.Agent/IIndexerAgent/GetLastProcessedPackagesResponse")]
        System.Threading.Tasks.Task<Sciendo.Index.Web.IndexingClient.ProgressStatus[]> GetLastProcessedPackagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Indexer.Agent/IIndexerAgent/ListAvailableMusicPathsForIndexing", ReplyAction="http://Sciendo.Indexer.Agent/IIndexerAgent/ListAvailableMusicPathsForIndexingResp" +
            "onse")]
        string[] ListAvailableMusicPathsForIndexing(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Indexer.Agent/IIndexerAgent/ListAvailableMusicPathsForIndexing", ReplyAction="http://Sciendo.Indexer.Agent/IIndexerAgent/ListAvailableMusicPathsForIndexingResp" +
            "onse")]
        System.Threading.Tasks.Task<string[]> ListAvailableMusicPathsForIndexingAsync(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Indexer.Agent/IIndexerAgent/ListAvailableLyricsPathsForIndexing", ReplyAction="http://Sciendo.Indexer.Agent/IIndexerAgent/ListAvailableLyricsPathsForIndexingRes" +
            "ponse")]
        string[] ListAvailableLyricsPathsForIndexing(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Indexer.Agent/IIndexerAgent/ListAvailableLyricsPathsForIndexing", ReplyAction="http://Sciendo.Indexer.Agent/IIndexerAgent/ListAvailableLyricsPathsForIndexingRes" +
            "ponse")]
        System.Threading.Tasks.Task<string[]> ListAvailableLyricsPathsForIndexingAsync(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Indexer.Agent/IIndexerAgent/GetSourceFolders", ReplyAction="http://Sciendo.Indexer.Agent/IIndexerAgent/GetSourceFoldersResponse")]
        Sciendo.Index.Web.IndexingClient.SourceFolders GetSourceFolders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Indexer.Agent/IIndexerAgent/GetSourceFolders", ReplyAction="http://Sciendo.Indexer.Agent/IIndexerAgent/GetSourceFoldersResponse")]
        System.Threading.Tasks.Task<Sciendo.Index.Web.IndexingClient.SourceFolders> GetSourceFoldersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIndexerAgentChannel : Sciendo.Index.Web.IndexingClient.IIndexerAgent, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IndexerAgentClient : System.ServiceModel.ClientBase<Sciendo.Index.Web.IndexingClient.IIndexerAgent>, Sciendo.Index.Web.IndexingClient.IIndexerAgent {
        
        public IndexerAgentClient() {
        }
        
        public IndexerAgentClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IndexerAgentClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IndexerAgentClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IndexerAgentClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int IndexLyricsOnDemand(string fromPath) {
            return base.Channel.IndexLyricsOnDemand(fromPath);
        }
        
        public System.Threading.Tasks.Task<int> IndexLyricsOnDemandAsync(string fromPath) {
            return base.Channel.IndexLyricsOnDemandAsync(fromPath);
        }
        
        public int IndexMusicOnDemand(string fromPath) {
            return base.Channel.IndexMusicOnDemand(fromPath);
        }
        
        public System.Threading.Tasks.Task<int> IndexMusicOnDemandAsync(string fromPath) {
            return base.Channel.IndexMusicOnDemandAsync(fromPath);
        }
        
        public Sciendo.Index.Web.IndexingClient.ProgressStatus[] GetLastProcessedPackages() {
            return base.Channel.GetLastProcessedPackages();
        }
        
        public System.Threading.Tasks.Task<Sciendo.Index.Web.IndexingClient.ProgressStatus[]> GetLastProcessedPackagesAsync() {
            return base.Channel.GetLastProcessedPackagesAsync();
        }
        
        public string[] ListAvailableMusicPathsForIndexing(string fromPath) {
            return base.Channel.ListAvailableMusicPathsForIndexing(fromPath);
        }
        
        public System.Threading.Tasks.Task<string[]> ListAvailableMusicPathsForIndexingAsync(string fromPath) {
            return base.Channel.ListAvailableMusicPathsForIndexingAsync(fromPath);
        }
        
        public string[] ListAvailableLyricsPathsForIndexing(string fromPath) {
            return base.Channel.ListAvailableLyricsPathsForIndexing(fromPath);
        }
        
        public System.Threading.Tasks.Task<string[]> ListAvailableLyricsPathsForIndexingAsync(string fromPath) {
            return base.Channel.ListAvailableLyricsPathsForIndexingAsync(fromPath);
        }
        
        public Sciendo.Index.Web.IndexingClient.SourceFolders GetSourceFolders() {
            return base.Channel.GetSourceFolders();
        }
        
        public System.Threading.Tasks.Task<Sciendo.Index.Web.IndexingClient.SourceFolders> GetSourceFoldersAsync() {
            return base.Channel.GetSourceFoldersAsync();
        }
    }
}
