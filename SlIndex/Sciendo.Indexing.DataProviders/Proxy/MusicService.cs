//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sciendo.Music.Contracts.Monitoring
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessType", Namespace="http://schemas.datacontract.org/2004/07/Sciendo.Music.Contracts.Monitoring")]
    public enum ProcessType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Delete = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Update = 2,
    }
}
namespace Sciendo.Music.Contracts.MusicService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProgressStatus", Namespace="http://schemas.datacontract.org/2004/07/Sciendo.Music.Contracts.MusicService")]
    public partial class ProgressStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid IdField;
        
        private System.DateTime MessageCreationDateTimeField;
        
        private string PackageField;
        
        private Sciendo.Music.Contracts.Common.Status StatusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MessageCreationDateTime
        {
            get
            {
                return this.MessageCreationDateTimeField;
            }
            set
            {
                this.MessageCreationDateTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Package
        {
            get
            {
                return this.PackageField;
            }
            set
            {
                this.PackageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sciendo.Music.Contracts.Common.Status Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkingSet", Namespace="http://schemas.datacontract.org/2004/07/Sciendo.Music.Contracts.MusicService")]
    public partial class WorkingSet : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Type IndexingFilesProcessorTypeField;
        
        private System.Type LyricsAcquirerFilesProcessorTypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Type IndexingFilesProcessorType
        {
            get
            {
                return this.IndexingFilesProcessorTypeField;
            }
            set
            {
                this.IndexingFilesProcessorTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Type LyricsAcquirerFilesProcessorType
        {
            get
            {
                return this.LyricsAcquirerFilesProcessorTypeField;
            }
            set
            {
                this.LyricsAcquirerFilesProcessorTypeField = value;
            }
        }
    }
}
namespace Sciendo.Music.Contracts.Common
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/Sciendo.Music.Contracts.Common")]
    public enum Status : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LyricsDownloadedOk = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Done = 3,
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://Sciendo.Music.Agent", ConfigurationName="IMusic")]
public interface IMusic
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/IndexOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/IndexOnDemandResponse")]
    int IndexOnDemand(string fromPath);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/IndexOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/IndexOnDemandResponse")]
    System.IAsyncResult BeginIndexOnDemand(string fromPath, System.AsyncCallback callback, object asyncState);
    
    int EndIndexOnDemand(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/Index", ReplyAction="http://Sciendo.Music.Agent/IMusic/IndexResponse")]
    int Index(string fromPath, Sciendo.Music.Contracts.Monitoring.ProcessType processType);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/Index", ReplyAction="http://Sciendo.Music.Agent/IMusic/IndexResponse")]
    System.IAsyncResult BeginIndex(string fromPath, Sciendo.Music.Contracts.Monitoring.ProcessType processType, System.AsyncCallback callback, object asyncState);
    
    int EndIndex(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/AcquireLyricsOnDemandFor", ReplyAction="http://Sciendo.Music.Agent/IMusic/AcquireLyricsOnDemandForResponse")]
    int AcquireLyricsOnDemandFor(string musicPath, bool retryFailed);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/AcquireLyricsOnDemandFor", ReplyAction="http://Sciendo.Music.Agent/IMusic/AcquireLyricsOnDemandForResponse")]
    System.IAsyncResult BeginAcquireLyricsOnDemandFor(string musicPath, bool retryFailed, System.AsyncCallback callback, object asyncState);
    
    int EndAcquireLyricsOnDemandFor(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/GetLastProcessedPackages", ReplyAction="http://Sciendo.Music.Agent/IMusic/GetLastProcessedPackagesResponse")]
    Sciendo.Music.Contracts.MusicService.ProgressStatus[] GetLastProcessedPackages();
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/GetLastProcessedPackages", ReplyAction="http://Sciendo.Music.Agent/IMusic/GetLastProcessedPackagesResponse")]
    System.IAsyncResult BeginGetLastProcessedPackages(System.AsyncCallback callback, object asyncState);
    
    Sciendo.Music.Contracts.MusicService.ProgressStatus[] EndGetLastProcessedPackages(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/ListAvailablePathsForIndexing", ReplyAction="http://Sciendo.Music.Agent/IMusic/ListAvailablePathsForIndexingResponse")]
    string[] ListAvailablePathsForIndexing(string fromPath);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/ListAvailablePathsForIndexing", ReplyAction="http://Sciendo.Music.Agent/IMusic/ListAvailablePathsForIndexingResponse")]
    System.IAsyncResult BeginListAvailablePathsForIndexing(string fromPath, System.AsyncCallback callback, object asyncState);
    
    string[] EndListAvailablePathsForIndexing(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/GetSourceFolder", ReplyAction="http://Sciendo.Music.Agent/IMusic/GetSourceFolderResponse")]
    string GetSourceFolder();
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/GetSourceFolder", ReplyAction="http://Sciendo.Music.Agent/IMusic/GetSourceFolderResponse")]
    System.IAsyncResult BeginGetSourceFolder(System.AsyncCallback callback, object asyncState);
    
    string EndGetSourceFolder(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/UnIndexOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/UnIndexOnDemandResponse")]
    int UnIndexOnDemand(string musicFile);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/UnIndexOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/UnIndexOnDemandResponse")]
    System.IAsyncResult BeginUnIndexOnDemand(string musicFile, System.AsyncCallback callback, object asyncState);
    
    int EndUnIndexOnDemand(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/GetCurrentWorkingSet", ReplyAction="http://Sciendo.Music.Agent/IMusic/GetCurrentWorkingSetResponse")]
    Sciendo.Music.Contracts.MusicService.WorkingSet GetCurrentWorkingSet();
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/GetCurrentWorkingSet", ReplyAction="http://Sciendo.Music.Agent/IMusic/GetCurrentWorkingSetResponse")]
    System.IAsyncResult BeginGetCurrentWorkingSet(System.AsyncCallback callback, object asyncState);
    
    Sciendo.Music.Contracts.MusicService.WorkingSet EndGetCurrentWorkingSet(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IMusicChannel : IMusic, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class IndexOnDemandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public IndexOnDemandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class IndexCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public IndexCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class AcquireLyricsOnDemandForCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public AcquireLyricsOnDemandForCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetLastProcessedPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetLastProcessedPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public Sciendo.Music.Contracts.MusicService.ProgressStatus[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((Sciendo.Music.Contracts.MusicService.ProgressStatus[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ListAvailablePathsForIndexingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public ListAvailablePathsForIndexingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public string[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetSourceFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetSourceFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public string Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class UnIndexOnDemandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public UnIndexOnDemandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetCurrentWorkingSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetCurrentWorkingSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public Sciendo.Music.Contracts.MusicService.WorkingSet Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((Sciendo.Music.Contracts.MusicService.WorkingSet)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class MusicClient : System.ServiceModel.ClientBase<IMusic>, IMusic
{
    
    private BeginOperationDelegate onBeginIndexOnDemandDelegate;
    
    private EndOperationDelegate onEndIndexOnDemandDelegate;
    
    private System.Threading.SendOrPostCallback onIndexOnDemandCompletedDelegate;
    
    private BeginOperationDelegate onBeginIndexDelegate;
    
    private EndOperationDelegate onEndIndexDelegate;
    
    private System.Threading.SendOrPostCallback onIndexCompletedDelegate;
    
    private BeginOperationDelegate onBeginAcquireLyricsOnDemandForDelegate;
    
    private EndOperationDelegate onEndAcquireLyricsOnDemandForDelegate;
    
    private System.Threading.SendOrPostCallback onAcquireLyricsOnDemandForCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetLastProcessedPackagesDelegate;
    
    private EndOperationDelegate onEndGetLastProcessedPackagesDelegate;
    
    private System.Threading.SendOrPostCallback onGetLastProcessedPackagesCompletedDelegate;
    
    private BeginOperationDelegate onBeginListAvailablePathsForIndexingDelegate;
    
    private EndOperationDelegate onEndListAvailablePathsForIndexingDelegate;
    
    private System.Threading.SendOrPostCallback onListAvailablePathsForIndexingCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetSourceFolderDelegate;
    
    private EndOperationDelegate onEndGetSourceFolderDelegate;
    
    private System.Threading.SendOrPostCallback onGetSourceFolderCompletedDelegate;
    
    private BeginOperationDelegate onBeginUnIndexOnDemandDelegate;
    
    private EndOperationDelegate onEndUnIndexOnDemandDelegate;
    
    private System.Threading.SendOrPostCallback onUnIndexOnDemandCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetCurrentWorkingSetDelegate;
    
    private EndOperationDelegate onEndGetCurrentWorkingSetDelegate;
    
    private System.Threading.SendOrPostCallback onGetCurrentWorkingSetCompletedDelegate;
    
    public MusicClient()
    {
    }
    
    public MusicClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MusicClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MusicClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MusicClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public event System.EventHandler<IndexOnDemandCompletedEventArgs> IndexOnDemandCompleted;
    
    public event System.EventHandler<IndexCompletedEventArgs> IndexCompleted;
    
    public event System.EventHandler<AcquireLyricsOnDemandForCompletedEventArgs> AcquireLyricsOnDemandForCompleted;
    
    public event System.EventHandler<GetLastProcessedPackagesCompletedEventArgs> GetLastProcessedPackagesCompleted;
    
    public event System.EventHandler<ListAvailablePathsForIndexingCompletedEventArgs> ListAvailablePathsForIndexingCompleted;
    
    public event System.EventHandler<GetSourceFolderCompletedEventArgs> GetSourceFolderCompleted;
    
    public event System.EventHandler<UnIndexOnDemandCompletedEventArgs> UnIndexOnDemandCompleted;
    
    public event System.EventHandler<GetCurrentWorkingSetCompletedEventArgs> GetCurrentWorkingSetCompleted;
    
    public int IndexOnDemand(string fromPath)
    {
        return base.Channel.IndexOnDemand(fromPath);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginIndexOnDemand(string fromPath, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginIndexOnDemand(fromPath, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public int EndIndexOnDemand(System.IAsyncResult result)
    {
        return base.Channel.EndIndexOnDemand(result);
    }
    
    private System.IAsyncResult OnBeginIndexOnDemand(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string fromPath = ((string)(inValues[0]));
        return this.BeginIndexOnDemand(fromPath, callback, asyncState);
    }
    
    private object[] OnEndIndexOnDemand(System.IAsyncResult result)
    {
        int retVal = this.EndIndexOnDemand(result);
        return new object[] {
                retVal};
    }
    
    private void OnIndexOnDemandCompleted(object state)
    {
        if ((this.IndexOnDemandCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.IndexOnDemandCompleted(this, new IndexOnDemandCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void IndexOnDemandAsync(string fromPath)
    {
        this.IndexOnDemandAsync(fromPath, null);
    }
    
    public void IndexOnDemandAsync(string fromPath, object userState)
    {
        if ((this.onBeginIndexOnDemandDelegate == null))
        {
            this.onBeginIndexOnDemandDelegate = new BeginOperationDelegate(this.OnBeginIndexOnDemand);
        }
        if ((this.onEndIndexOnDemandDelegate == null))
        {
            this.onEndIndexOnDemandDelegate = new EndOperationDelegate(this.OnEndIndexOnDemand);
        }
        if ((this.onIndexOnDemandCompletedDelegate == null))
        {
            this.onIndexOnDemandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIndexOnDemandCompleted);
        }
        base.InvokeAsync(this.onBeginIndexOnDemandDelegate, new object[] {
                    fromPath}, this.onEndIndexOnDemandDelegate, this.onIndexOnDemandCompletedDelegate, userState);
    }
    
    public int Index(string fromPath, Sciendo.Music.Contracts.Monitoring.ProcessType processType)
    {
        return base.Channel.Index(fromPath, processType);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginIndex(string fromPath, Sciendo.Music.Contracts.Monitoring.ProcessType processType, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginIndex(fromPath, processType, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public int EndIndex(System.IAsyncResult result)
    {
        return base.Channel.EndIndex(result);
    }
    
    private System.IAsyncResult OnBeginIndex(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string fromPath = ((string)(inValues[0]));
        Sciendo.Music.Contracts.Monitoring.ProcessType processType = ((Sciendo.Music.Contracts.Monitoring.ProcessType)(inValues[1]));
        return this.BeginIndex(fromPath, processType, callback, asyncState);
    }
    
    private object[] OnEndIndex(System.IAsyncResult result)
    {
        int retVal = this.EndIndex(result);
        return new object[] {
                retVal};
    }
    
    private void OnIndexCompleted(object state)
    {
        if ((this.IndexCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.IndexCompleted(this, new IndexCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void IndexAsync(string fromPath, Sciendo.Music.Contracts.Monitoring.ProcessType processType)
    {
        this.IndexAsync(fromPath, processType, null);
    }
    
    public void IndexAsync(string fromPath, Sciendo.Music.Contracts.Monitoring.ProcessType processType, object userState)
    {
        if ((this.onBeginIndexDelegate == null))
        {
            this.onBeginIndexDelegate = new BeginOperationDelegate(this.OnBeginIndex);
        }
        if ((this.onEndIndexDelegate == null))
        {
            this.onEndIndexDelegate = new EndOperationDelegate(this.OnEndIndex);
        }
        if ((this.onIndexCompletedDelegate == null))
        {
            this.onIndexCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIndexCompleted);
        }
        base.InvokeAsync(this.onBeginIndexDelegate, new object[] {
                    fromPath,
                    processType}, this.onEndIndexDelegate, this.onIndexCompletedDelegate, userState);
    }
    
    public int AcquireLyricsOnDemandFor(string musicPath, bool retryFailed)
    {
        return base.Channel.AcquireLyricsOnDemandFor(musicPath, retryFailed);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginAcquireLyricsOnDemandFor(string musicPath, bool retryFailed, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginAcquireLyricsOnDemandFor(musicPath, retryFailed, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public int EndAcquireLyricsOnDemandFor(System.IAsyncResult result)
    {
        return base.Channel.EndAcquireLyricsOnDemandFor(result);
    }
    
    private System.IAsyncResult OnBeginAcquireLyricsOnDemandFor(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string musicPath = ((string)(inValues[0]));
        bool retryFailed = ((bool)(inValues[1]));
        return this.BeginAcquireLyricsOnDemandFor(musicPath, retryFailed, callback, asyncState);
    }
    
    private object[] OnEndAcquireLyricsOnDemandFor(System.IAsyncResult result)
    {
        int retVal = this.EndAcquireLyricsOnDemandFor(result);
        return new object[] {
                retVal};
    }
    
    private void OnAcquireLyricsOnDemandForCompleted(object state)
    {
        if ((this.AcquireLyricsOnDemandForCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.AcquireLyricsOnDemandForCompleted(this, new AcquireLyricsOnDemandForCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void AcquireLyricsOnDemandForAsync(string musicPath, bool retryFailed)
    {
        this.AcquireLyricsOnDemandForAsync(musicPath, retryFailed, null);
    }
    
    public void AcquireLyricsOnDemandForAsync(string musicPath, bool retryFailed, object userState)
    {
        if ((this.onBeginAcquireLyricsOnDemandForDelegate == null))
        {
            this.onBeginAcquireLyricsOnDemandForDelegate = new BeginOperationDelegate(this.OnBeginAcquireLyricsOnDemandFor);
        }
        if ((this.onEndAcquireLyricsOnDemandForDelegate == null))
        {
            this.onEndAcquireLyricsOnDemandForDelegate = new EndOperationDelegate(this.OnEndAcquireLyricsOnDemandFor);
        }
        if ((this.onAcquireLyricsOnDemandForCompletedDelegate == null))
        {
            this.onAcquireLyricsOnDemandForCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAcquireLyricsOnDemandForCompleted);
        }
        base.InvokeAsync(this.onBeginAcquireLyricsOnDemandForDelegate, new object[] {
                    musicPath,
                    retryFailed}, this.onEndAcquireLyricsOnDemandForDelegate, this.onAcquireLyricsOnDemandForCompletedDelegate, userState);
    }
    
    public Sciendo.Music.Contracts.MusicService.ProgressStatus[] GetLastProcessedPackages()
    {
        return base.Channel.GetLastProcessedPackages();
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginGetLastProcessedPackages(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetLastProcessedPackages(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public Sciendo.Music.Contracts.MusicService.ProgressStatus[] EndGetLastProcessedPackages(System.IAsyncResult result)
    {
        return base.Channel.EndGetLastProcessedPackages(result);
    }
    
    private System.IAsyncResult OnBeginGetLastProcessedPackages(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginGetLastProcessedPackages(callback, asyncState);
    }
    
    private object[] OnEndGetLastProcessedPackages(System.IAsyncResult result)
    {
        Sciendo.Music.Contracts.MusicService.ProgressStatus[] retVal = this.EndGetLastProcessedPackages(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetLastProcessedPackagesCompleted(object state)
    {
        if ((this.GetLastProcessedPackagesCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetLastProcessedPackagesCompleted(this, new GetLastProcessedPackagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetLastProcessedPackagesAsync()
    {
        this.GetLastProcessedPackagesAsync(null);
    }
    
    public void GetLastProcessedPackagesAsync(object userState)
    {
        if ((this.onBeginGetLastProcessedPackagesDelegate == null))
        {
            this.onBeginGetLastProcessedPackagesDelegate = new BeginOperationDelegate(this.OnBeginGetLastProcessedPackages);
        }
        if ((this.onEndGetLastProcessedPackagesDelegate == null))
        {
            this.onEndGetLastProcessedPackagesDelegate = new EndOperationDelegate(this.OnEndGetLastProcessedPackages);
        }
        if ((this.onGetLastProcessedPackagesCompletedDelegate == null))
        {
            this.onGetLastProcessedPackagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLastProcessedPackagesCompleted);
        }
        base.InvokeAsync(this.onBeginGetLastProcessedPackagesDelegate, null, this.onEndGetLastProcessedPackagesDelegate, this.onGetLastProcessedPackagesCompletedDelegate, userState);
    }
    
    public string[] ListAvailablePathsForIndexing(string fromPath)
    {
        return base.Channel.ListAvailablePathsForIndexing(fromPath);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginListAvailablePathsForIndexing(string fromPath, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginListAvailablePathsForIndexing(fromPath, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public string[] EndListAvailablePathsForIndexing(System.IAsyncResult result)
    {
        return base.Channel.EndListAvailablePathsForIndexing(result);
    }
    
    private System.IAsyncResult OnBeginListAvailablePathsForIndexing(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string fromPath = ((string)(inValues[0]));
        return this.BeginListAvailablePathsForIndexing(fromPath, callback, asyncState);
    }
    
    private object[] OnEndListAvailablePathsForIndexing(System.IAsyncResult result)
    {
        string[] retVal = this.EndListAvailablePathsForIndexing(result);
        return new object[] {
                retVal};
    }
    
    private void OnListAvailablePathsForIndexingCompleted(object state)
    {
        if ((this.ListAvailablePathsForIndexingCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.ListAvailablePathsForIndexingCompleted(this, new ListAvailablePathsForIndexingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void ListAvailablePathsForIndexingAsync(string fromPath)
    {
        this.ListAvailablePathsForIndexingAsync(fromPath, null);
    }
    
    public void ListAvailablePathsForIndexingAsync(string fromPath, object userState)
    {
        if ((this.onBeginListAvailablePathsForIndexingDelegate == null))
        {
            this.onBeginListAvailablePathsForIndexingDelegate = new BeginOperationDelegate(this.OnBeginListAvailablePathsForIndexing);
        }
        if ((this.onEndListAvailablePathsForIndexingDelegate == null))
        {
            this.onEndListAvailablePathsForIndexingDelegate = new EndOperationDelegate(this.OnEndListAvailablePathsForIndexing);
        }
        if ((this.onListAvailablePathsForIndexingCompletedDelegate == null))
        {
            this.onListAvailablePathsForIndexingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListAvailablePathsForIndexingCompleted);
        }
        base.InvokeAsync(this.onBeginListAvailablePathsForIndexingDelegate, new object[] {
                    fromPath}, this.onEndListAvailablePathsForIndexingDelegate, this.onListAvailablePathsForIndexingCompletedDelegate, userState);
    }
    
    public string GetSourceFolder()
    {
        return base.Channel.GetSourceFolder();
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginGetSourceFolder(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetSourceFolder(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public string EndGetSourceFolder(System.IAsyncResult result)
    {
        return base.Channel.EndGetSourceFolder(result);
    }
    
    private System.IAsyncResult OnBeginGetSourceFolder(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginGetSourceFolder(callback, asyncState);
    }
    
    private object[] OnEndGetSourceFolder(System.IAsyncResult result)
    {
        string retVal = this.EndGetSourceFolder(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetSourceFolderCompleted(object state)
    {
        if ((this.GetSourceFolderCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetSourceFolderCompleted(this, new GetSourceFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetSourceFolderAsync()
    {
        this.GetSourceFolderAsync(null);
    }
    
    public void GetSourceFolderAsync(object userState)
    {
        if ((this.onBeginGetSourceFolderDelegate == null))
        {
            this.onBeginGetSourceFolderDelegate = new BeginOperationDelegate(this.OnBeginGetSourceFolder);
        }
        if ((this.onEndGetSourceFolderDelegate == null))
        {
            this.onEndGetSourceFolderDelegate = new EndOperationDelegate(this.OnEndGetSourceFolder);
        }
        if ((this.onGetSourceFolderCompletedDelegate == null))
        {
            this.onGetSourceFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSourceFolderCompleted);
        }
        base.InvokeAsync(this.onBeginGetSourceFolderDelegate, null, this.onEndGetSourceFolderDelegate, this.onGetSourceFolderCompletedDelegate, userState);
    }
    
    public int UnIndexOnDemand(string musicFile)
    {
        return base.Channel.UnIndexOnDemand(musicFile);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginUnIndexOnDemand(string musicFile, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginUnIndexOnDemand(musicFile, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public int EndUnIndexOnDemand(System.IAsyncResult result)
    {
        return base.Channel.EndUnIndexOnDemand(result);
    }
    
    private System.IAsyncResult OnBeginUnIndexOnDemand(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string musicFile = ((string)(inValues[0]));
        return this.BeginUnIndexOnDemand(musicFile, callback, asyncState);
    }
    
    private object[] OnEndUnIndexOnDemand(System.IAsyncResult result)
    {
        int retVal = this.EndUnIndexOnDemand(result);
        return new object[] {
                retVal};
    }
    
    private void OnUnIndexOnDemandCompleted(object state)
    {
        if ((this.UnIndexOnDemandCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.UnIndexOnDemandCompleted(this, new UnIndexOnDemandCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void UnIndexOnDemandAsync(string musicFile)
    {
        this.UnIndexOnDemandAsync(musicFile, null);
    }
    
    public void UnIndexOnDemandAsync(string musicFile, object userState)
    {
        if ((this.onBeginUnIndexOnDemandDelegate == null))
        {
            this.onBeginUnIndexOnDemandDelegate = new BeginOperationDelegate(this.OnBeginUnIndexOnDemand);
        }
        if ((this.onEndUnIndexOnDemandDelegate == null))
        {
            this.onEndUnIndexOnDemandDelegate = new EndOperationDelegate(this.OnEndUnIndexOnDemand);
        }
        if ((this.onUnIndexOnDemandCompletedDelegate == null))
        {
            this.onUnIndexOnDemandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnIndexOnDemandCompleted);
        }
        base.InvokeAsync(this.onBeginUnIndexOnDemandDelegate, new object[] {
                    musicFile}, this.onEndUnIndexOnDemandDelegate, this.onUnIndexOnDemandCompletedDelegate, userState);
    }
    
    public Sciendo.Music.Contracts.MusicService.WorkingSet GetCurrentWorkingSet()
    {
        return base.Channel.GetCurrentWorkingSet();
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginGetCurrentWorkingSet(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetCurrentWorkingSet(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public Sciendo.Music.Contracts.MusicService.WorkingSet EndGetCurrentWorkingSet(System.IAsyncResult result)
    {
        return base.Channel.EndGetCurrentWorkingSet(result);
    }
    
    private System.IAsyncResult OnBeginGetCurrentWorkingSet(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginGetCurrentWorkingSet(callback, asyncState);
    }
    
    private object[] OnEndGetCurrentWorkingSet(System.IAsyncResult result)
    {
        Sciendo.Music.Contracts.MusicService.WorkingSet retVal = this.EndGetCurrentWorkingSet(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetCurrentWorkingSetCompleted(object state)
    {
        if ((this.GetCurrentWorkingSetCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetCurrentWorkingSetCompleted(this, new GetCurrentWorkingSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetCurrentWorkingSetAsync()
    {
        this.GetCurrentWorkingSetAsync(null);
    }
    
    public void GetCurrentWorkingSetAsync(object userState)
    {
        if ((this.onBeginGetCurrentWorkingSetDelegate == null))
        {
            this.onBeginGetCurrentWorkingSetDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentWorkingSet);
        }
        if ((this.onEndGetCurrentWorkingSetDelegate == null))
        {
            this.onEndGetCurrentWorkingSetDelegate = new EndOperationDelegate(this.OnEndGetCurrentWorkingSet);
        }
        if ((this.onGetCurrentWorkingSetCompletedDelegate == null))
        {
            this.onGetCurrentWorkingSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentWorkingSetCompleted);
        }
        base.InvokeAsync(this.onBeginGetCurrentWorkingSetDelegate, null, this.onEndGetCurrentWorkingSetDelegate, this.onGetCurrentWorkingSetCompletedDelegate, userState);
    }
}
