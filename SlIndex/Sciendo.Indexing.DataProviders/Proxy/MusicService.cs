//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sciendo.Music.Contracts.MusicService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProgressStatus", Namespace="http://schemas.datacontract.org/2004/07/Sciendo.Music.Contracts.MusicService")]
    public partial class ProgressStatus : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid IdField;
        
        private System.DateTime MessageCreationDateTimeField;
        
        private string PackageField;
        
        private Sciendo.Music.Contracts.Common.Status StatusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MessageCreationDateTime
        {
            get
            {
                return this.MessageCreationDateTimeField;
            }
            set
            {
                this.MessageCreationDateTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Package
        {
            get
            {
                return this.PackageField;
            }
            set
            {
                this.PackageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Sciendo.Music.Contracts.Common.Status Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SourceFolders", Namespace="http://schemas.datacontract.org/2004/07/Sciendo.Music.Contracts.MusicService")]
    public partial class SourceFolders : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string LyricsField;
        
        private string MusicField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lyrics
        {
            get
            {
                return this.LyricsField;
            }
            set
            {
                this.LyricsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Music
        {
            get
            {
                return this.MusicField;
            }
            set
            {
                this.MusicField = value;
            }
        }
    }
}
namespace Sciendo.Music.Contracts.Common
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/Sciendo.Music.Contracts.Common")]
    public enum Status : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LyricsDownloadedOk = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Done = 3,
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://Sciendo.Music.Agent", ConfigurationName="IMusic")]
public interface IMusic
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/IndexLyricsOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/IndexLyricsOnDemandResponse")]
    int IndexLyricsOnDemand(string fromPath);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/IndexLyricsOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/IndexLyricsOnDemandResponse")]
    System.IAsyncResult BeginIndexLyricsOnDemand(string fromPath, System.AsyncCallback callback, object asyncState);
    
    int EndIndexLyricsOnDemand(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/IndexMusicOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/IndexMusicOnDemandResponse")]
    int IndexMusicOnDemand(string fromPath);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/IndexMusicOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/IndexMusicOnDemandResponse")]
    System.IAsyncResult BeginIndexMusicOnDemand(string fromPath, System.AsyncCallback callback, object asyncState);
    
    int EndIndexMusicOnDemand(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/AcquireLyricsOnDemandFor", ReplyAction="http://Sciendo.Music.Agent/IMusic/AcquireLyricsOnDemandForResponse")]
    int AcquireLyricsOnDemandFor(string musicPath, bool retryFailed);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/AcquireLyricsOnDemandFor", ReplyAction="http://Sciendo.Music.Agent/IMusic/AcquireLyricsOnDemandForResponse")]
    System.IAsyncResult BeginAcquireLyricsOnDemandFor(string musicPath, bool retryFailed, System.AsyncCallback callback, object asyncState);
    
    int EndAcquireLyricsOnDemandFor(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/GetLastProcessedPackages", ReplyAction="http://Sciendo.Music.Agent/IMusic/GetLastProcessedPackagesResponse")]
    Sciendo.Music.Contracts.MusicService.ProgressStatus[] GetLastProcessedPackages();
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/GetLastProcessedPackages", ReplyAction="http://Sciendo.Music.Agent/IMusic/GetLastProcessedPackagesResponse")]
    System.IAsyncResult BeginGetLastProcessedPackages(System.AsyncCallback callback, object asyncState);
    
    Sciendo.Music.Contracts.MusicService.ProgressStatus[] EndGetLastProcessedPackages(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/ListAvailableMusicPathsForIndexing", ReplyAction="http://Sciendo.Music.Agent/IMusic/ListAvailableMusicPathsForIndexingResponse")]
    string[] ListAvailableMusicPathsForIndexing(string fromPath);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/ListAvailableMusicPathsForIndexing", ReplyAction="http://Sciendo.Music.Agent/IMusic/ListAvailableMusicPathsForIndexingResponse")]
    System.IAsyncResult BeginListAvailableMusicPathsForIndexing(string fromPath, System.AsyncCallback callback, object asyncState);
    
    string[] EndListAvailableMusicPathsForIndexing(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/ListAvailableLyricsPathsForIndexing", ReplyAction="http://Sciendo.Music.Agent/IMusic/ListAvailableLyricsPathsForIndexingResponse")]
    string[] ListAvailableLyricsPathsForIndexing(string fromPath);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/ListAvailableLyricsPathsForIndexing", ReplyAction="http://Sciendo.Music.Agent/IMusic/ListAvailableLyricsPathsForIndexingResponse")]
    System.IAsyncResult BeginListAvailableLyricsPathsForIndexing(string fromPath, System.AsyncCallback callback, object asyncState);
    
    string[] EndListAvailableLyricsPathsForIndexing(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/GetSourceFolders", ReplyAction="http://Sciendo.Music.Agent/IMusic/GetSourceFoldersResponse")]
    Sciendo.Music.Contracts.MusicService.SourceFolders GetSourceFolders();
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/GetSourceFolders", ReplyAction="http://Sciendo.Music.Agent/IMusic/GetSourceFoldersResponse")]
    System.IAsyncResult BeginGetSourceFolders(System.AsyncCallback callback, object asyncState);
    
    Sciendo.Music.Contracts.MusicService.SourceFolders EndGetSourceFolders(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/UnIndexMusicOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/UnIndexMusicOnDemandResponse")]
    int UnIndexMusicOnDemand(string musicFile);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/UnIndexMusicOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/UnIndexMusicOnDemandResponse")]
    System.IAsyncResult BeginUnIndexMusicOnDemand(string musicFile, System.AsyncCallback callback, object asyncState);
    
    int EndUnIndexMusicOnDemand(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/DeleteLyricsFile", ReplyAction="http://Sciendo.Music.Agent/IMusic/DeleteLyricsFileResponse")]
    bool DeleteLyricsFile(string file);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/DeleteLyricsFile", ReplyAction="http://Sciendo.Music.Agent/IMusic/DeleteLyricsFileResponse")]
    System.IAsyncResult BeginDeleteLyricsFile(string file, System.AsyncCallback callback, object asyncState);
    
    bool EndDeleteLyricsFile(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/UnIndexLyricsOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/UnIndexLyricsOnDemandResponse")]
    int UnIndexLyricsOnDemand(string musicFile);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Sciendo.Music.Agent/IMusic/UnIndexLyricsOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/UnIndexLyricsOnDemandResponse")]
    System.IAsyncResult BeginUnIndexLyricsOnDemand(string musicFile, System.AsyncCallback callback, object asyncState);
    
    int EndUnIndexLyricsOnDemand(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IMusicChannel : IMusic, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class IndexLyricsOnDemandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public IndexLyricsOnDemandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class IndexMusicOnDemandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public IndexMusicOnDemandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class AcquireLyricsOnDemandForCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public AcquireLyricsOnDemandForCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetLastProcessedPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetLastProcessedPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public Sciendo.Music.Contracts.MusicService.ProgressStatus[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((Sciendo.Music.Contracts.MusicService.ProgressStatus[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ListAvailableMusicPathsForIndexingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public ListAvailableMusicPathsForIndexingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public string[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ListAvailableLyricsPathsForIndexingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public ListAvailableLyricsPathsForIndexingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public string[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetSourceFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetSourceFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public Sciendo.Music.Contracts.MusicService.SourceFolders Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((Sciendo.Music.Contracts.MusicService.SourceFolders)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class UnIndexMusicOnDemandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public UnIndexMusicOnDemandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class DeleteLyricsFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public DeleteLyricsFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public bool Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class UnIndexLyricsOnDemandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public UnIndexLyricsOnDemandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class MusicClient : System.ServiceModel.ClientBase<IMusic>, IMusic
{
    
    private BeginOperationDelegate onBeginIndexLyricsOnDemandDelegate;
    
    private EndOperationDelegate onEndIndexLyricsOnDemandDelegate;
    
    private System.Threading.SendOrPostCallback onIndexLyricsOnDemandCompletedDelegate;
    
    private BeginOperationDelegate onBeginIndexMusicOnDemandDelegate;
    
    private EndOperationDelegate onEndIndexMusicOnDemandDelegate;
    
    private System.Threading.SendOrPostCallback onIndexMusicOnDemandCompletedDelegate;
    
    private BeginOperationDelegate onBeginAcquireLyricsOnDemandForDelegate;
    
    private EndOperationDelegate onEndAcquireLyricsOnDemandForDelegate;
    
    private System.Threading.SendOrPostCallback onAcquireLyricsOnDemandForCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetLastProcessedPackagesDelegate;
    
    private EndOperationDelegate onEndGetLastProcessedPackagesDelegate;
    
    private System.Threading.SendOrPostCallback onGetLastProcessedPackagesCompletedDelegate;
    
    private BeginOperationDelegate onBeginListAvailableMusicPathsForIndexingDelegate;
    
    private EndOperationDelegate onEndListAvailableMusicPathsForIndexingDelegate;
    
    private System.Threading.SendOrPostCallback onListAvailableMusicPathsForIndexingCompletedDelegate;
    
    private BeginOperationDelegate onBeginListAvailableLyricsPathsForIndexingDelegate;
    
    private EndOperationDelegate onEndListAvailableLyricsPathsForIndexingDelegate;
    
    private System.Threading.SendOrPostCallback onListAvailableLyricsPathsForIndexingCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetSourceFoldersDelegate;
    
    private EndOperationDelegate onEndGetSourceFoldersDelegate;
    
    private System.Threading.SendOrPostCallback onGetSourceFoldersCompletedDelegate;
    
    private BeginOperationDelegate onBeginUnIndexMusicOnDemandDelegate;
    
    private EndOperationDelegate onEndUnIndexMusicOnDemandDelegate;
    
    private System.Threading.SendOrPostCallback onUnIndexMusicOnDemandCompletedDelegate;
    
    private BeginOperationDelegate onBeginDeleteLyricsFileDelegate;
    
    private EndOperationDelegate onEndDeleteLyricsFileDelegate;
    
    private System.Threading.SendOrPostCallback onDeleteLyricsFileCompletedDelegate;
    
    private BeginOperationDelegate onBeginUnIndexLyricsOnDemandDelegate;
    
    private EndOperationDelegate onEndUnIndexLyricsOnDemandDelegate;
    
    private System.Threading.SendOrPostCallback onUnIndexLyricsOnDemandCompletedDelegate;
    
    public MusicClient()
    {
    }
    
    public MusicClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MusicClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MusicClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MusicClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public event System.EventHandler<IndexLyricsOnDemandCompletedEventArgs> IndexLyricsOnDemandCompleted;
    
    public event System.EventHandler<IndexMusicOnDemandCompletedEventArgs> IndexMusicOnDemandCompleted;
    
    public event System.EventHandler<AcquireLyricsOnDemandForCompletedEventArgs> AcquireLyricsOnDemandForCompleted;
    
    public event System.EventHandler<GetLastProcessedPackagesCompletedEventArgs> GetLastProcessedPackagesCompleted;
    
    public event System.EventHandler<ListAvailableMusicPathsForIndexingCompletedEventArgs> ListAvailableMusicPathsForIndexingCompleted;
    
    public event System.EventHandler<ListAvailableLyricsPathsForIndexingCompletedEventArgs> ListAvailableLyricsPathsForIndexingCompleted;
    
    public event System.EventHandler<GetSourceFoldersCompletedEventArgs> GetSourceFoldersCompleted;
    
    public event System.EventHandler<UnIndexMusicOnDemandCompletedEventArgs> UnIndexMusicOnDemandCompleted;
    
    public event System.EventHandler<DeleteLyricsFileCompletedEventArgs> DeleteLyricsFileCompleted;
    
    public event System.EventHandler<UnIndexLyricsOnDemandCompletedEventArgs> UnIndexLyricsOnDemandCompleted;
    
    public int IndexLyricsOnDemand(string fromPath)
    {
        return base.Channel.IndexLyricsOnDemand(fromPath);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginIndexLyricsOnDemand(string fromPath, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginIndexLyricsOnDemand(fromPath, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public int EndIndexLyricsOnDemand(System.IAsyncResult result)
    {
        return base.Channel.EndIndexLyricsOnDemand(result);
    }
    
    private System.IAsyncResult OnBeginIndexLyricsOnDemand(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string fromPath = ((string)(inValues[0]));
        return this.BeginIndexLyricsOnDemand(fromPath, callback, asyncState);
    }
    
    private object[] OnEndIndexLyricsOnDemand(System.IAsyncResult result)
    {
        int retVal = this.EndIndexLyricsOnDemand(result);
        return new object[] {
                retVal};
    }
    
    private void OnIndexLyricsOnDemandCompleted(object state)
    {
        if ((this.IndexLyricsOnDemandCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.IndexLyricsOnDemandCompleted(this, new IndexLyricsOnDemandCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void IndexLyricsOnDemandAsync(string fromPath)
    {
        this.IndexLyricsOnDemandAsync(fromPath, null);
    }
    
    public void IndexLyricsOnDemandAsync(string fromPath, object userState)
    {
        if ((this.onBeginIndexLyricsOnDemandDelegate == null))
        {
            this.onBeginIndexLyricsOnDemandDelegate = new BeginOperationDelegate(this.OnBeginIndexLyricsOnDemand);
        }
        if ((this.onEndIndexLyricsOnDemandDelegate == null))
        {
            this.onEndIndexLyricsOnDemandDelegate = new EndOperationDelegate(this.OnEndIndexLyricsOnDemand);
        }
        if ((this.onIndexLyricsOnDemandCompletedDelegate == null))
        {
            this.onIndexLyricsOnDemandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIndexLyricsOnDemandCompleted);
        }
        base.InvokeAsync(this.onBeginIndexLyricsOnDemandDelegate, new object[] {
                    fromPath}, this.onEndIndexLyricsOnDemandDelegate, this.onIndexLyricsOnDemandCompletedDelegate, userState);
    }
    
    public int IndexMusicOnDemand(string fromPath)
    {
        return base.Channel.IndexMusicOnDemand(fromPath);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginIndexMusicOnDemand(string fromPath, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginIndexMusicOnDemand(fromPath, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public int EndIndexMusicOnDemand(System.IAsyncResult result)
    {
        return base.Channel.EndIndexMusicOnDemand(result);
    }
    
    private System.IAsyncResult OnBeginIndexMusicOnDemand(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string fromPath = ((string)(inValues[0]));
        return this.BeginIndexMusicOnDemand(fromPath, callback, asyncState);
    }
    
    private object[] OnEndIndexMusicOnDemand(System.IAsyncResult result)
    {
        int retVal = this.EndIndexMusicOnDemand(result);
        return new object[] {
                retVal};
    }
    
    private void OnIndexMusicOnDemandCompleted(object state)
    {
        if ((this.IndexMusicOnDemandCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.IndexMusicOnDemandCompleted(this, new IndexMusicOnDemandCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void IndexMusicOnDemandAsync(string fromPath)
    {
        this.IndexMusicOnDemandAsync(fromPath, null);
    }
    
    public void IndexMusicOnDemandAsync(string fromPath, object userState)
    {
        if ((this.onBeginIndexMusicOnDemandDelegate == null))
        {
            this.onBeginIndexMusicOnDemandDelegate = new BeginOperationDelegate(this.OnBeginIndexMusicOnDemand);
        }
        if ((this.onEndIndexMusicOnDemandDelegate == null))
        {
            this.onEndIndexMusicOnDemandDelegate = new EndOperationDelegate(this.OnEndIndexMusicOnDemand);
        }
        if ((this.onIndexMusicOnDemandCompletedDelegate == null))
        {
            this.onIndexMusicOnDemandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIndexMusicOnDemandCompleted);
        }
        base.InvokeAsync(this.onBeginIndexMusicOnDemandDelegate, new object[] {
                    fromPath}, this.onEndIndexMusicOnDemandDelegate, this.onIndexMusicOnDemandCompletedDelegate, userState);
    }
    
    public int AcquireLyricsOnDemandFor(string musicPath, bool retryFailed)
    {
        return base.Channel.AcquireLyricsOnDemandFor(musicPath, retryFailed);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginAcquireLyricsOnDemandFor(string musicPath, bool retryFailed, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginAcquireLyricsOnDemandFor(musicPath, retryFailed, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public int EndAcquireLyricsOnDemandFor(System.IAsyncResult result)
    {
        return base.Channel.EndAcquireLyricsOnDemandFor(result);
    }
    
    private System.IAsyncResult OnBeginAcquireLyricsOnDemandFor(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string musicPath = ((string)(inValues[0]));
        bool retryFailed = ((bool)(inValues[1]));
        return this.BeginAcquireLyricsOnDemandFor(musicPath, retryFailed, callback, asyncState);
    }
    
    private object[] OnEndAcquireLyricsOnDemandFor(System.IAsyncResult result)
    {
        int retVal = this.EndAcquireLyricsOnDemandFor(result);
        return new object[] {
                retVal};
    }
    
    private void OnAcquireLyricsOnDemandForCompleted(object state)
    {
        if ((this.AcquireLyricsOnDemandForCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.AcquireLyricsOnDemandForCompleted(this, new AcquireLyricsOnDemandForCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void AcquireLyricsOnDemandForAsync(string musicPath, bool retryFailed)
    {
        this.AcquireLyricsOnDemandForAsync(musicPath, retryFailed, null);
    }
    
    public void AcquireLyricsOnDemandForAsync(string musicPath, bool retryFailed, object userState)
    {
        if ((this.onBeginAcquireLyricsOnDemandForDelegate == null))
        {
            this.onBeginAcquireLyricsOnDemandForDelegate = new BeginOperationDelegate(this.OnBeginAcquireLyricsOnDemandFor);
        }
        if ((this.onEndAcquireLyricsOnDemandForDelegate == null))
        {
            this.onEndAcquireLyricsOnDemandForDelegate = new EndOperationDelegate(this.OnEndAcquireLyricsOnDemandFor);
        }
        if ((this.onAcquireLyricsOnDemandForCompletedDelegate == null))
        {
            this.onAcquireLyricsOnDemandForCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAcquireLyricsOnDemandForCompleted);
        }
        base.InvokeAsync(this.onBeginAcquireLyricsOnDemandForDelegate, new object[] {
                    musicPath,
                    retryFailed}, this.onEndAcquireLyricsOnDemandForDelegate, this.onAcquireLyricsOnDemandForCompletedDelegate, userState);
    }
    
    public Sciendo.Music.Contracts.MusicService.ProgressStatus[] GetLastProcessedPackages()
    {
        return base.Channel.GetLastProcessedPackages();
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginGetLastProcessedPackages(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetLastProcessedPackages(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public Sciendo.Music.Contracts.MusicService.ProgressStatus[] EndGetLastProcessedPackages(System.IAsyncResult result)
    {
        return base.Channel.EndGetLastProcessedPackages(result);
    }
    
    private System.IAsyncResult OnBeginGetLastProcessedPackages(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginGetLastProcessedPackages(callback, asyncState);
    }
    
    private object[] OnEndGetLastProcessedPackages(System.IAsyncResult result)
    {
        Sciendo.Music.Contracts.MusicService.ProgressStatus[] retVal = this.EndGetLastProcessedPackages(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetLastProcessedPackagesCompleted(object state)
    {
        if ((this.GetLastProcessedPackagesCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetLastProcessedPackagesCompleted(this, new GetLastProcessedPackagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetLastProcessedPackagesAsync()
    {
        this.GetLastProcessedPackagesAsync(null);
    }
    
    public void GetLastProcessedPackagesAsync(object userState)
    {
        if ((this.onBeginGetLastProcessedPackagesDelegate == null))
        {
            this.onBeginGetLastProcessedPackagesDelegate = new BeginOperationDelegate(this.OnBeginGetLastProcessedPackages);
        }
        if ((this.onEndGetLastProcessedPackagesDelegate == null))
        {
            this.onEndGetLastProcessedPackagesDelegate = new EndOperationDelegate(this.OnEndGetLastProcessedPackages);
        }
        if ((this.onGetLastProcessedPackagesCompletedDelegate == null))
        {
            this.onGetLastProcessedPackagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLastProcessedPackagesCompleted);
        }
        base.InvokeAsync(this.onBeginGetLastProcessedPackagesDelegate, null, this.onEndGetLastProcessedPackagesDelegate, this.onGetLastProcessedPackagesCompletedDelegate, userState);
    }
    
    public string[] ListAvailableMusicPathsForIndexing(string fromPath)
    {
        return base.Channel.ListAvailableMusicPathsForIndexing(fromPath);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginListAvailableMusicPathsForIndexing(string fromPath, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginListAvailableMusicPathsForIndexing(fromPath, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public string[] EndListAvailableMusicPathsForIndexing(System.IAsyncResult result)
    {
        return base.Channel.EndListAvailableMusicPathsForIndexing(result);
    }
    
    private System.IAsyncResult OnBeginListAvailableMusicPathsForIndexing(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string fromPath = ((string)(inValues[0]));
        return this.BeginListAvailableMusicPathsForIndexing(fromPath, callback, asyncState);
    }
    
    private object[] OnEndListAvailableMusicPathsForIndexing(System.IAsyncResult result)
    {
        string[] retVal = this.EndListAvailableMusicPathsForIndexing(result);
        return new object[] {
                retVal};
    }
    
    private void OnListAvailableMusicPathsForIndexingCompleted(object state)
    {
        if ((this.ListAvailableMusicPathsForIndexingCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.ListAvailableMusicPathsForIndexingCompleted(this, new ListAvailableMusicPathsForIndexingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void ListAvailableMusicPathsForIndexingAsync(string fromPath)
    {
        this.ListAvailableMusicPathsForIndexingAsync(fromPath, null);
    }
    
    public void ListAvailableMusicPathsForIndexingAsync(string fromPath, object userState)
    {
        if ((this.onBeginListAvailableMusicPathsForIndexingDelegate == null))
        {
            this.onBeginListAvailableMusicPathsForIndexingDelegate = new BeginOperationDelegate(this.OnBeginListAvailableMusicPathsForIndexing);
        }
        if ((this.onEndListAvailableMusicPathsForIndexingDelegate == null))
        {
            this.onEndListAvailableMusicPathsForIndexingDelegate = new EndOperationDelegate(this.OnEndListAvailableMusicPathsForIndexing);
        }
        if ((this.onListAvailableMusicPathsForIndexingCompletedDelegate == null))
        {
            this.onListAvailableMusicPathsForIndexingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListAvailableMusicPathsForIndexingCompleted);
        }
        base.InvokeAsync(this.onBeginListAvailableMusicPathsForIndexingDelegate, new object[] {
                    fromPath}, this.onEndListAvailableMusicPathsForIndexingDelegate, this.onListAvailableMusicPathsForIndexingCompletedDelegate, userState);
    }
    
    public string[] ListAvailableLyricsPathsForIndexing(string fromPath)
    {
        return base.Channel.ListAvailableLyricsPathsForIndexing(fromPath);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginListAvailableLyricsPathsForIndexing(string fromPath, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginListAvailableLyricsPathsForIndexing(fromPath, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public string[] EndListAvailableLyricsPathsForIndexing(System.IAsyncResult result)
    {
        return base.Channel.EndListAvailableLyricsPathsForIndexing(result);
    }
    
    private System.IAsyncResult OnBeginListAvailableLyricsPathsForIndexing(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string fromPath = ((string)(inValues[0]));
        return this.BeginListAvailableLyricsPathsForIndexing(fromPath, callback, asyncState);
    }
    
    private object[] OnEndListAvailableLyricsPathsForIndexing(System.IAsyncResult result)
    {
        string[] retVal = this.EndListAvailableLyricsPathsForIndexing(result);
        return new object[] {
                retVal};
    }
    
    private void OnListAvailableLyricsPathsForIndexingCompleted(object state)
    {
        if ((this.ListAvailableLyricsPathsForIndexingCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.ListAvailableLyricsPathsForIndexingCompleted(this, new ListAvailableLyricsPathsForIndexingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void ListAvailableLyricsPathsForIndexingAsync(string fromPath)
    {
        this.ListAvailableLyricsPathsForIndexingAsync(fromPath, null);
    }
    
    public void ListAvailableLyricsPathsForIndexingAsync(string fromPath, object userState)
    {
        if ((this.onBeginListAvailableLyricsPathsForIndexingDelegate == null))
        {
            this.onBeginListAvailableLyricsPathsForIndexingDelegate = new BeginOperationDelegate(this.OnBeginListAvailableLyricsPathsForIndexing);
        }
        if ((this.onEndListAvailableLyricsPathsForIndexingDelegate == null))
        {
            this.onEndListAvailableLyricsPathsForIndexingDelegate = new EndOperationDelegate(this.OnEndListAvailableLyricsPathsForIndexing);
        }
        if ((this.onListAvailableLyricsPathsForIndexingCompletedDelegate == null))
        {
            this.onListAvailableLyricsPathsForIndexingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListAvailableLyricsPathsForIndexingCompleted);
        }
        base.InvokeAsync(this.onBeginListAvailableLyricsPathsForIndexingDelegate, new object[] {
                    fromPath}, this.onEndListAvailableLyricsPathsForIndexingDelegate, this.onListAvailableLyricsPathsForIndexingCompletedDelegate, userState);
    }
    
    public Sciendo.Music.Contracts.MusicService.SourceFolders GetSourceFolders()
    {
        return base.Channel.GetSourceFolders();
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginGetSourceFolders(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetSourceFolders(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public Sciendo.Music.Contracts.MusicService.SourceFolders EndGetSourceFolders(System.IAsyncResult result)
    {
        return base.Channel.EndGetSourceFolders(result);
    }
    
    private System.IAsyncResult OnBeginGetSourceFolders(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginGetSourceFolders(callback, asyncState);
    }
    
    private object[] OnEndGetSourceFolders(System.IAsyncResult result)
    {
        Sciendo.Music.Contracts.MusicService.SourceFolders retVal = this.EndGetSourceFolders(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetSourceFoldersCompleted(object state)
    {
        if ((this.GetSourceFoldersCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetSourceFoldersCompleted(this, new GetSourceFoldersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetSourceFoldersAsync()
    {
        this.GetSourceFoldersAsync(null);
    }
    
    public void GetSourceFoldersAsync(object userState)
    {
        if ((this.onBeginGetSourceFoldersDelegate == null))
        {
            this.onBeginGetSourceFoldersDelegate = new BeginOperationDelegate(this.OnBeginGetSourceFolders);
        }
        if ((this.onEndGetSourceFoldersDelegate == null))
        {
            this.onEndGetSourceFoldersDelegate = new EndOperationDelegate(this.OnEndGetSourceFolders);
        }
        if ((this.onGetSourceFoldersCompletedDelegate == null))
        {
            this.onGetSourceFoldersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSourceFoldersCompleted);
        }
        base.InvokeAsync(this.onBeginGetSourceFoldersDelegate, null, this.onEndGetSourceFoldersDelegate, this.onGetSourceFoldersCompletedDelegate, userState);
    }
    
    public int UnIndexMusicOnDemand(string musicFile)
    {
        return base.Channel.UnIndexMusicOnDemand(musicFile);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginUnIndexMusicOnDemand(string musicFile, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginUnIndexMusicOnDemand(musicFile, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public int EndUnIndexMusicOnDemand(System.IAsyncResult result)
    {
        return base.Channel.EndUnIndexMusicOnDemand(result);
    }
    
    private System.IAsyncResult OnBeginUnIndexMusicOnDemand(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string musicFile = ((string)(inValues[0]));
        return this.BeginUnIndexMusicOnDemand(musicFile, callback, asyncState);
    }
    
    private object[] OnEndUnIndexMusicOnDemand(System.IAsyncResult result)
    {
        int retVal = this.EndUnIndexMusicOnDemand(result);
        return new object[] {
                retVal};
    }
    
    private void OnUnIndexMusicOnDemandCompleted(object state)
    {
        if ((this.UnIndexMusicOnDemandCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.UnIndexMusicOnDemandCompleted(this, new UnIndexMusicOnDemandCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void UnIndexMusicOnDemandAsync(string musicFile)
    {
        this.UnIndexMusicOnDemandAsync(musicFile, null);
    }
    
    public void UnIndexMusicOnDemandAsync(string musicFile, object userState)
    {
        if ((this.onBeginUnIndexMusicOnDemandDelegate == null))
        {
            this.onBeginUnIndexMusicOnDemandDelegate = new BeginOperationDelegate(this.OnBeginUnIndexMusicOnDemand);
        }
        if ((this.onEndUnIndexMusicOnDemandDelegate == null))
        {
            this.onEndUnIndexMusicOnDemandDelegate = new EndOperationDelegate(this.OnEndUnIndexMusicOnDemand);
        }
        if ((this.onUnIndexMusicOnDemandCompletedDelegate == null))
        {
            this.onUnIndexMusicOnDemandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnIndexMusicOnDemandCompleted);
        }
        base.InvokeAsync(this.onBeginUnIndexMusicOnDemandDelegate, new object[] {
                    musicFile}, this.onEndUnIndexMusicOnDemandDelegate, this.onUnIndexMusicOnDemandCompletedDelegate, userState);
    }
    
    public bool DeleteLyricsFile(string file)
    {
        return base.Channel.DeleteLyricsFile(file);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginDeleteLyricsFile(string file, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginDeleteLyricsFile(file, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public bool EndDeleteLyricsFile(System.IAsyncResult result)
    {
        return base.Channel.EndDeleteLyricsFile(result);
    }
    
    private System.IAsyncResult OnBeginDeleteLyricsFile(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string file = ((string)(inValues[0]));
        return this.BeginDeleteLyricsFile(file, callback, asyncState);
    }
    
    private object[] OnEndDeleteLyricsFile(System.IAsyncResult result)
    {
        bool retVal = this.EndDeleteLyricsFile(result);
        return new object[] {
                retVal};
    }
    
    private void OnDeleteLyricsFileCompleted(object state)
    {
        if ((this.DeleteLyricsFileCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.DeleteLyricsFileCompleted(this, new DeleteLyricsFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void DeleteLyricsFileAsync(string file)
    {
        this.DeleteLyricsFileAsync(file, null);
    }
    
    public void DeleteLyricsFileAsync(string file, object userState)
    {
        if ((this.onBeginDeleteLyricsFileDelegate == null))
        {
            this.onBeginDeleteLyricsFileDelegate = new BeginOperationDelegate(this.OnBeginDeleteLyricsFile);
        }
        if ((this.onEndDeleteLyricsFileDelegate == null))
        {
            this.onEndDeleteLyricsFileDelegate = new EndOperationDelegate(this.OnEndDeleteLyricsFile);
        }
        if ((this.onDeleteLyricsFileCompletedDelegate == null))
        {
            this.onDeleteLyricsFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteLyricsFileCompleted);
        }
        base.InvokeAsync(this.onBeginDeleteLyricsFileDelegate, new object[] {
                    file}, this.onEndDeleteLyricsFileDelegate, this.onDeleteLyricsFileCompletedDelegate, userState);
    }
    
    public int UnIndexLyricsOnDemand(string musicFile)
    {
        return base.Channel.UnIndexLyricsOnDemand(musicFile);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginUnIndexLyricsOnDemand(string musicFile, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginUnIndexLyricsOnDemand(musicFile, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public int EndUnIndexLyricsOnDemand(System.IAsyncResult result)
    {
        return base.Channel.EndUnIndexLyricsOnDemand(result);
    }
    
    private System.IAsyncResult OnBeginUnIndexLyricsOnDemand(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string musicFile = ((string)(inValues[0]));
        return this.BeginUnIndexLyricsOnDemand(musicFile, callback, asyncState);
    }
    
    private object[] OnEndUnIndexLyricsOnDemand(System.IAsyncResult result)
    {
        int retVal = this.EndUnIndexLyricsOnDemand(result);
        return new object[] {
                retVal};
    }
    
    private void OnUnIndexLyricsOnDemandCompleted(object state)
    {
        if ((this.UnIndexLyricsOnDemandCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.UnIndexLyricsOnDemandCompleted(this, new UnIndexLyricsOnDemandCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void UnIndexLyricsOnDemandAsync(string musicFile)
    {
        this.UnIndexLyricsOnDemandAsync(musicFile, null);
    }
    
    public void UnIndexLyricsOnDemandAsync(string musicFile, object userState)
    {
        if ((this.onBeginUnIndexLyricsOnDemandDelegate == null))
        {
            this.onBeginUnIndexLyricsOnDemandDelegate = new BeginOperationDelegate(this.OnBeginUnIndexLyricsOnDemand);
        }
        if ((this.onEndUnIndexLyricsOnDemandDelegate == null))
        {
            this.onEndUnIndexLyricsOnDemandDelegate = new EndOperationDelegate(this.OnEndUnIndexLyricsOnDemand);
        }
        if ((this.onUnIndexLyricsOnDemandCompletedDelegate == null))
        {
            this.onUnIndexLyricsOnDemandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnIndexLyricsOnDemandCompleted);
        }
        base.InvokeAsync(this.onBeginUnIndexLyricsOnDemandDelegate, new object[] {
                    musicFile}, this.onEndUnIndexLyricsOnDemandDelegate, this.onUnIndexLyricsOnDemandCompletedDelegate, userState);
    }
}
