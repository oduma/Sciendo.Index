//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sciendo.Music.Web.MusicClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Sciendo.Music.Agent", ConfigurationName="MusicClient.IMusic")]
    public interface IMusic {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/IndexLyricsOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/IndexLyricsOnDemandResponse")]
        int IndexLyricsOnDemand(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/IndexLyricsOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/IndexLyricsOnDemandResponse")]
        System.Threading.Tasks.Task<int> IndexLyricsOnDemandAsync(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/IndexMusicOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/IndexMusicOnDemandResponse")]
        int IndexMusicOnDemand(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/IndexMusicOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/IndexMusicOnDemandResponse")]
        System.Threading.Tasks.Task<int> IndexMusicOnDemandAsync(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/AcquireLyricsOnDemandFor", ReplyAction="http://Sciendo.Music.Agent/IMusic/AcquireLyricsOnDemandForResponse")]
        int AcquireLyricsOnDemandFor(string musicPath, bool retryFailed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/AcquireLyricsOnDemandFor", ReplyAction="http://Sciendo.Music.Agent/IMusic/AcquireLyricsOnDemandForResponse")]
        System.Threading.Tasks.Task<int> AcquireLyricsOnDemandForAsync(string musicPath, bool retryFailed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/GetLastProcessedPackages", ReplyAction="http://Sciendo.Music.Agent/IMusic/GetLastProcessedPackagesResponse")]
        Sciendo.Music.DataProviders.MusicClient.ProgressStatus[] GetLastProcessedPackages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/GetLastProcessedPackages", ReplyAction="http://Sciendo.Music.Agent/IMusic/GetLastProcessedPackagesResponse")]
        System.Threading.Tasks.Task<Sciendo.Music.DataProviders.MusicClient.ProgressStatus[]> GetLastProcessedPackagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/ListAvailableMusicPathsForIndexing", ReplyAction="http://Sciendo.Music.Agent/IMusic/ListAvailableMusicPathsForIndexingResponse")]
        string[] ListAvailableMusicPathsForIndexing(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/ListAvailableMusicPathsForIndexing", ReplyAction="http://Sciendo.Music.Agent/IMusic/ListAvailableMusicPathsForIndexingResponse")]
        System.Threading.Tasks.Task<string[]> ListAvailableMusicPathsForIndexingAsync(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/ListAvailableLyricsPathsForIndexing", ReplyAction="http://Sciendo.Music.Agent/IMusic/ListAvailableLyricsPathsForIndexingResponse")]
        string[] ListAvailableLyricsPathsForIndexing(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/ListAvailableLyricsPathsForIndexing", ReplyAction="http://Sciendo.Music.Agent/IMusic/ListAvailableLyricsPathsForIndexingResponse")]
        System.Threading.Tasks.Task<string[]> ListAvailableLyricsPathsForIndexingAsync(string fromPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/GetSourceFolders", ReplyAction="http://Sciendo.Music.Agent/IMusic/GetSourceFoldersResponse")]
        Sciendo.Music.DataProviders.MusicClient.SourceFolders GetSourceFolders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/GetSourceFolders", ReplyAction="http://Sciendo.Music.Agent/IMusic/GetSourceFoldersResponse")]
        System.Threading.Tasks.Task<Sciendo.Music.DataProviders.MusicClient.SourceFolders> GetSourceFoldersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/UnIndexMusicOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/UnIndexMusicOnDemandResponse")]
        int UnIndexMusicOnDemand(string musicFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/UnIndexMusicOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/UnIndexMusicOnDemandResponse")]
        System.Threading.Tasks.Task<int> UnIndexMusicOnDemandAsync(string musicFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/DeleteLyricsFile", ReplyAction="http://Sciendo.Music.Agent/IMusic/DeleteLyricsFileResponse")]
        bool DeleteLyricsFile(string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/DeleteLyricsFile", ReplyAction="http://Sciendo.Music.Agent/IMusic/DeleteLyricsFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteLyricsFileAsync(string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/UnIndexLyricsOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/UnIndexLyricsOnDemandResponse")]
        int UnIndexLyricsOnDemand(string musicFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Sciendo.Music.Agent/IMusic/UnIndexLyricsOnDemand", ReplyAction="http://Sciendo.Music.Agent/IMusic/UnIndexLyricsOnDemandResponse")]
        System.Threading.Tasks.Task<int> UnIndexLyricsOnDemandAsync(string musicFile);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMusicChannel : Sciendo.Music.Web.MusicClient.IMusic, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MusicClient : System.ServiceModel.ClientBase<Sciendo.Music.Web.MusicClient.IMusic>, Sciendo.Music.Web.MusicClient.IMusic {
        
        public MusicClient() {
        }
        
        public MusicClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MusicClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MusicClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MusicClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int IndexLyricsOnDemand(string fromPath) {
            return base.Channel.IndexLyricsOnDemand(fromPath);
        }
        
        public System.Threading.Tasks.Task<int> IndexLyricsOnDemandAsync(string fromPath) {
            return base.Channel.IndexLyricsOnDemandAsync(fromPath);
        }
        
        public int IndexMusicOnDemand(string fromPath) {
            return base.Channel.IndexMusicOnDemand(fromPath);
        }
        
        public System.Threading.Tasks.Task<int> IndexMusicOnDemandAsync(string fromPath) {
            return base.Channel.IndexMusicOnDemandAsync(fromPath);
        }
        
        public int AcquireLyricsOnDemandFor(string musicPath, bool retryFailed) {
            return base.Channel.AcquireLyricsOnDemandFor(musicPath, retryFailed);
        }
        
        public System.Threading.Tasks.Task<int> AcquireLyricsOnDemandForAsync(string musicPath, bool retryFailed) {
            return base.Channel.AcquireLyricsOnDemandForAsync(musicPath, retryFailed);
        }
        
        public Sciendo.Music.DataProviders.MusicClient.ProgressStatus[] GetLastProcessedPackages() {
            return base.Channel.GetLastProcessedPackages();
        }
        
        public System.Threading.Tasks.Task<Sciendo.Music.DataProviders.MusicClient.ProgressStatus[]> GetLastProcessedPackagesAsync() {
            return base.Channel.GetLastProcessedPackagesAsync();
        }
        
        public string[] ListAvailableMusicPathsForIndexing(string fromPath) {
            return base.Channel.ListAvailableMusicPathsForIndexing(fromPath);
        }
        
        public System.Threading.Tasks.Task<string[]> ListAvailableMusicPathsForIndexingAsync(string fromPath) {
            return base.Channel.ListAvailableMusicPathsForIndexingAsync(fromPath);
        }
        
        public string[] ListAvailableLyricsPathsForIndexing(string fromPath) {
            return base.Channel.ListAvailableLyricsPathsForIndexing(fromPath);
        }
        
        public System.Threading.Tasks.Task<string[]> ListAvailableLyricsPathsForIndexingAsync(string fromPath) {
            return base.Channel.ListAvailableLyricsPathsForIndexingAsync(fromPath);
        }
        
        public Sciendo.Music.DataProviders.MusicClient.SourceFolders GetSourceFolders() {
            return base.Channel.GetSourceFolders();
        }
        
        public System.Threading.Tasks.Task<Sciendo.Music.DataProviders.MusicClient.SourceFolders> GetSourceFoldersAsync() {
            return base.Channel.GetSourceFoldersAsync();
        }
        
        public int UnIndexMusicOnDemand(string musicFile) {
            return base.Channel.UnIndexMusicOnDemand(musicFile);
        }
        
        public System.Threading.Tasks.Task<int> UnIndexMusicOnDemandAsync(string musicFile) {
            return base.Channel.UnIndexMusicOnDemandAsync(musicFile);
        }
        
        public bool DeleteLyricsFile(string file) {
            return base.Channel.DeleteLyricsFile(file);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteLyricsFileAsync(string file) {
            return base.Channel.DeleteLyricsFileAsync(file);
        }
        
        public int UnIndexLyricsOnDemand(string musicFile) {
            return base.Channel.UnIndexLyricsOnDemand(musicFile);
        }
        
        public System.Threading.Tasks.Task<int> UnIndexLyricsOnDemandAsync(string musicFile) {
            return base.Channel.UnIndexLyricsOnDemandAsync(musicFile);
        }
    }
}
